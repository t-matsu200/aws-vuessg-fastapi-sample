import{C as g}from"./CHeRJYPu.js";let p;const h=new Uint8Array(16);function U(){if(!p&&(p=typeof crypto<"u"&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto),!p))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return p(h)}const n=[];for(let t=0;t<256;++t)n.push((t+256).toString(16).slice(1));function b(t,e=0){return n[t[e+0]]+n[t[e+1]]+n[t[e+2]]+n[t[e+3]]+"-"+n[t[e+4]]+n[t[e+5]]+"-"+n[t[e+6]]+n[t[e+7]]+"-"+n[t[e+8]]+n[t[e+9]]+"-"+n[t[e+10]]+n[t[e+11]]+n[t[e+12]]+n[t[e+13]]+n[t[e+14]]+n[t[e+15]]}const w=typeof crypto<"u"&&crypto.randomUUID&&crypto.randomUUID.bind(crypto),m={randomUUID:w};function I(t,e,u){if(m.randomUUID&&!t)return m.randomUUID();t=t||{};const s=t.random||(t.rng||U)();return s[6]=s[6]&15|64,s[8]=s[8]&63|128,b(s)}class l extends Error{constructor(e,u,s){super(e),this.name="HttpError",this.statusCode=u,this.details=s,Object.setPrototypeOf(this,l.prototype)}}const D=t=>async(e,u)=>{const s=await t(e,u);if(!s.ok){const a=await s.json();let i="Something went wrong";throw a.detail&&Array.isArray(a.detail)?i=a.detail.map(d=>`${d.loc.join(".")} - ${d.msg}`).join(", "):a.detail&&(i=a.detail),new l(i,s.status,a)}return s.json()},S=()=>{const t="/api",{setTraceId:e,clearTraceId:u}=g();let a=async(o,r)=>{const c=`${t}${o}`;return await fetch(c,r)};[D].forEach(o=>{a=o(a)});const d=async(o,r)=>{const c=I();e(c);const y=new Headers(r==null?void 0:r.headers);y.set("X-Trace-ID",c),(r==null?void 0:r.body)instanceof FormData||y.set("Content-Type","application/json");try{return await a(o,{...r,headers:y})}finally{u()}};return{request:d,post:(o,r,c)=>d(o,{method:"POST",body:JSON.stringify(r),...c}),get:(o,r)=>d(o,{method:"GET",...r}),postFormData:async(o,r,c)=>d(o,{method:"POST",body:r,...c})}};export{l as H,S as u};
